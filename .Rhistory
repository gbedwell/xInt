genome = Hsapiens,
width = widths,
BPPARAM = MulticoreParam(workers = 2),
by.chrom = FALSE
)
# Implement Shimazaki-Shinomoto cost function
# Expects a list of count vectors
calc_cost <- function(counts, widths){
if (length(widths) < 2){
stop("length(widths) must be >= 2")
}
if (!is.list(counts)){
stop("counts must be a list.")
}
if (length(counts) != length(widths)){
stop("length(counts) must equal length(widths).")
}
costs <- sapply(
X = seq_along(widths),
FUN = function(x){
ww <- widths[x]
cc <- counts[[x]]
if (any(sapply(counts, is.list))){
total <- sum(
sapply(
X = cc,
FUN = function(x){
sum(x)
}
)
)
sapply(
X = cc,
FUN = function(y){
mu <- mean(y)
sig2 <- sum((y - mu)^2) / length(y)
(2 * mu - sig2) / (total * ww)^2
}
)
} else{
total <- sum(cc)
mu <- mean(cc)
sig2 <- sum((cc - mu)^2) / length(cc)
(2 * mu - sig2) / (total * ww)^2
}
}
)
costs <- t(costs)
if (length(costs) != 1){
opt.width <- apply(
X = costs,
MARGIN = 2,
FUN = function(x){
idx <- which(x == min(x))[1]
widths[idx]
}
)
} else{
opt.width = min(costs)
}
return(
list(
cost = costs,
individual.best = opt.width,
overall.best = median(opt.width)
)
)
}
# Wrapper function to parallelize calculating cost
# Remove span option. Windows must be non-overlapping.
cost_wrapper <- function(bam.file, paired, mid, yield.size, mapq.cutoff,
widths, genome, by.chrom, omit, ...){
aln.gr <- aligned_positions(
bam.file = bam.file,
paired = paired,
mid = mid,
yield.size = yield.size,
mapq.cutoff = mapq.cutoff,
omit = omit,
...
)
counts <- lapply(
X = widths,
FUN = function(x){
bins <- make_bins(
genome = genome,
width = x,
by.chrom = by.chrom,
omit = omit
)
counts <- bin_overlaps(aln.pos = aln.gr, bins = bins)
return(counts)
}
)
cost <- calc_cost(
counts = counts,
widths = widths
)
return(cost)
}
shimazaki(
bam.files = c("~/Desktop/francis_cr/bam/SON_1_rmdup.bam",
"~/Desktop/francis_cr/bam/SON_2_rmdup.bam"),
paired = TRUE,
mid = TRUE,
yield.size = 1E6,
mapq.cutoff = 0,
omit = c("chrM", "chrY"),
genome = Hsapiens,
width = widths,
BPPARAM = MulticoreParam(workers = 2),
by.chrom = FALSE
)
shimazaki(
bam.files = c("~/Desktop/francis_cr/bam/SON_1_rmdup.bam",
"~/Desktop/francis_cr/bam/SON_2_rmdup.bam"),
paired = TRUE,
mid = TRUE,
yield.size = 1E6,
mapq.cutoff = 0,
omit = c("chrM", "chrY"),
genome = Hsapiens,
width = widths,
BPPARAM = MulticoreParam(workers = 2),
by.chrom = TRUE
)
bin.size = 100
win.size = 20000
win.size %% bin.size
span = win.size %/% bin.size
span
win.size %% bin.size == 0
if (win.size %% bin.size == 0){
span = win.size %/% bin.size
}
grepl(
pattern = "pulldown",
x = bam.files
)
matrix(nrow=1000)
nrow(matrix(nrow=1000))
seq(1, nrow(matrix(nrow=1000)), by = span)
seq(1, nrow(matrix(nrow=1111)), by = span)
1111 - 1001
sapply(
X = starts,
FUN = function(x){
x-1
}
)
starts <- seq(1, nrow(matrix(nrow=1111)), by = span)
sapply(
X = starts,
FUN = function(x){
x-1
}
)
sapply(
X = starts,
FUN = function(x){
ends <- x-1
ends[ends != 0]
}
)
sapply(
X = starts,
FUN = function(x){
ends <- x-1
ends != 0
}
)
sapply(
X = starts,
FUN = function(x){
ends <- x-1
ends[ends != 0]
}
)
sapply(
X = starts,
FUN = function(x){
ends <- x-1
ends[which(ends != 0)]
}
)
sapply(
X = starts,
FUN = function(x){
ends <- x-1
}
)
seq(span, nrow(matrix(nrow=1111)), by = span)
starts <- seq(1, nrow(matrix(nrow=1111)), by = span)
ends <- c(seq(span, nrow(matrix(nrow=1111)), by = span), nrow(matrix(nrow=1111)))
starts
ends
mat <- matrix(nrow=1111)
mat
mat[1:200]
mat(201:400)
mat[201:400]
ends
ends[2:4]
starts:ends
mat <- matrix(nrow=1111, ncol = 4)
mat
mat[1:10,]
seq_len(starts)
seq_along(starts)
starts
ends
mat[1:5]
mat[1:5,]
2483874 / 100
2483874 / 1000
rep(1:ceiling(1000 / span), each = span)[1:1000]
len(1000) - step + 1
length(1000) - step + 1
1000 - step + 1
1000 - span + 1
1111 - span + 1
1000 - span + 1
2,501âˆ’200+1
2,501-200+1
2501-200+1
250-200+1
2500-200+1
seqnames <- "chr1"
starts <- seq(1, 1e6, by = 100)  # Adjust according to your data
ends <- starts + 99  # 100 bp windows
gr <- GRanges(seqnames = seqnames, ranges = IRanges(start = starts, end = ends))
gr
roll_up_windows <- function(gr, window_size, step) {
# Calculate the number of original windows to combine
num_to_combine <- window_size / step
# Create new starts and ends
new_starts <- seq(start(gr)[1], end(gr)[1], by = window_size)
new_ends <- new_starts + window_size - 1
# Create new GRanges object
new_gr <- GRanges(seqnames = seqnames(gr),
ranges = IRanges(start = new_starts, end = new_ends))
# Count overlaps
counts <- countOverlaps(new_gr, gr)
# Combine results into a DataFrame or keep as GRanges
new_gr$count <- counts
return(new_gr)
}
# Roll up to 20,000 bp windows (200 * 100 bp)
rolled_up_gr <- roll_up_windows(gr, window_size = 20000, step = 100)
rolled_up_gr
seq(start(gr)[1], end(gr)[1], by = window_size)
seq(start(gr)[1], end(gr)[1], by = 20000)
start(gr)[1]
seq(start(gr), end(gr), by = window_size)
seq(start(gr)[1], end(gr)[length(gr)], by = window_size)
seq(start(gr)[1], end(gr)[length(gr)], by = 20000)
roll_up_windows <- function(gr, window_size, step) {
# Calculate the number of original windows to combine
num_to_combine <- window_size / step
# Create new starts and ends
new_starts <- seq(start(gr)[1], end(gr)[length(gr)], by = window_size)
new_ends <- new_starts + window_size - 1
# Create new GRanges object
new_gr <- GRanges(seqnames = seqnames(gr),
ranges = IRanges(start = new_starts, end = new_ends))
# Count overlaps
counts <- countOverlaps(new_gr, gr)
# Combine results into a DataFrame or keep as GRanges
new_gr$count <- counts
return(new_gr)
}
# Roll up to 20,000 bp windows (200 * 100 bp)
rolled_up_gr <- roll_up_windows(gr, window_size = 20000, step = 100)
gr
# Create new starts and ends
new_starts <- seq(start(gr)[1], end(gr)[length(gr)], by = window_size)
# Calculate the number of original windows to combine
num_to_combine <- win.size / step
new.starts <- seq(start(gr)[1], end(gr)[length(gr)], by = window_size)
new.starts <- seq(start(gr)[1], end(gr)[length(gr)], by = win.size)
new.ends <- new.starts + win.size - 1
new.ends
new.starts
new_gr <- GRanges(seqnames = seqnames(gr),
ranges = IRanges(start = new_starts, end = new_ends))
new_gr <- GRanges(seqnames = seqnames(gr),
ranges = IRanges(start = new.starts, end = new.ends))
seqnames(gr)
new_gr <- GRanges(seqnames = seqnames(gr),
ranges = IRanges(start = new.starts, end = new.ends))
ranges = IRanges(start = new.starts, end = new.ends)
ranges
GRanges(seqnames = unique(seqnames(gr)),
ranges = IRanges(start = new.starts, end = new.ends))
rep(1:ceiling(nrow(mat) / span), each = span)[1:nrow(mat)]
length(rep(1:ceiling(nrow(mat) / span), each = span)[1:nrow(mat)])
tail(rep(1:ceiling(nrow(mat) / span), each = span)[1:nrow(mat)])
new.starts <- seq(from = start(gr)[1], to = end(gr)[length(gr)], by = window_size)
new.starts <- seq(from = start(gr)[1], to = end(gr)[length(gr)], by = win.size)
new.starts
new.ends <- new.starts + win.size - 1
length(new.starts)
new.ends <- new.starts + win.size - 1
new.ends <- pmin(new_ends, end(gr)[length(gr)])
nested_list <- list(
list(1, 2, 3),
list(4, 5, 6),
list(7, 8, 9)
)
lapply(nested_list, function(x) do.call(cbind, x[1]))
lapply(nested_list, function(x) do.call(cbind, list(x[1])))
lapply(nested_list, function(x) do.call(cbind, x[1]))
lapply(nested_list, function(x) do.call(cbind, c[1]))
lapply(nested_list, function(x) do.call(c, x[1]))
lapply(nested_list, function(x) do.call(c, x[[1]]))
lapply(nested_list, function(x) do.call(c, list(x[1])))
lapply(nested_list, function(x) do.call(c, x[1]))
lapply(nested_list, function(x) do.call(sum, x[1]))
lapply(nested_list, function(x) do.call(sum, list(x[1])))
lapply(nested_list, function(x) do.call(c, list(x[1])))
lapply(nested_list, function(x) do.call(c, x[1]))
nested_list <- list(
list(c(1,2,3)),
list(c(4, 5, 6)),
list(c(7, 8, 9))
)
nested_list
lapply(nested_list, function(x) do.call(c, x[1]))
lapply(nested_list, function(x) do.call(c, list(x[1])))
lapply(nested_list, function(x) do.call(c, x))
lapply(nested_list, function(x) do.call(sum, x))
lapply(nested_list, function(x) do.call(sum, x[1]))
lapply(nested_list, function(x) do.call(sum, list(x[1])))
sapply(nested_list, function(x) do.call(sum, list(x[1])))
nested_list <- list(
list(1, 2, 3),
list(4, 5, 6),
list(7, 8, 9)
)
sapply(nested_list, function(x) do.call(sum, list(x[1])))
nested_list
sapply(nested_list, function(x) do.call(sum, x[1]))
nested_list <- list(
list(1, c(1,2,3)),
list(4, c(4,5,6)),
list(7, c(7,8,9))
)
nested_list
sapply(nested_list, function(x) do.call(sum, x[1]))
sapply(nested_list, function(x) do.call(c, x[1]))
sapply(nested_list, function(x) do.call(cbind, x[2]))
(101 + 20100) / 2
(201 + 20200) / 2
(1000 / 1203)
n1 <- sample(1000:2000, 1)
n2 <- sample(1000:2000, 1)
rm(n1, n2)
ns <- sample(1000:2000, 4)
ns[1] / ns[2]
ns[3] / ns[4]
mean((ns[1] / ns[2])/ns[3] / ns[4])
ns <- sample(1000:5000, 4)
ns
((ns[1] / ns[2]) + (ns[3] + ns[4])) / 2
((ns[1] / ns[2]) + (ns[3] / ns[4])) / 2
(ns[1] + ns[3]) / (ns[2] + ns[4])
0.00001 / 0.00002
(0.00001 * 1E6) / (0.00002 * 1E6)
mean(c(1,2,3,NA,4))
mean(c(1,2,3,NA,4), na.rm = TRUE)
mean(c(1,2,3,NA,4), na.rm = TRUE)
vec <- c(1,2,3,0,5)
vec[vec != 0]
v1 <- c(1,1,0,1,1,1,1,0)
v2 <- c(1,0,1,1,1,1,1,0)
ifelse((v1 & v2) != 0, 1, 0)
ifelse((v1 & v2) != 0, sum(v1, v2), 0)
mean(c(1,2,3,4,5, NA), na.rm = TRUE)
mean(c(1,2,3,4,5, NA), na.rm = FALSE)
log2((c(2, NA) / 1)
(c(2, NA) / 1)
log2((c(2, NA) / 1), na.rm = TRUE)
log2(1/1E6)
log2(1/(1E6+1))
log2(1/(1E6+1))
(1E6+1)
log2((1/1E6)*1E6)
log2( ((1/2039485)*1E6) / ((1/1839496)*1E6) )
((1/1839496)*1E6)
((1/2039485)*1E6)
((1/1839496)*1E6) / ((1/2039485)*1E6)
log2(1.108719)
log2( ((1/2039485)) / ((1/1839496)) )
0.71 * 0.33
0.71 * 0.38
1 - 0.71
seqnames(Hsapiens)
length(unique(c(0,0,0,0,0))) == 1
seq(1, 7, 2)
2 %% 2
2 %% 8
load("son_tsa_seq_belmont.RData.gz")
tail(assays(v2.merge)$smooth.scores)
v2,merge
v2.merge
tail(assays(v2.merge)$mean.smooth.scores)
tail(assays(v2.merge)$mean.raw.scores)
tail(assays(v1.merge)$mean.raw.scores)
ecdf(assays(v2.merge)$mean.smooth.scores[1,])
ecdf(assays(v2.merge)$mean.smooth.scores[,1])
ecdf(assays(v2.merge)$mean.smooth.scores[,1])(assays(v2.merge)$mean.smooth.scores[,1])
ecdf(assays(v2.merge)$mean.smooth.scores[,4])(assays(v2.merge)$mean.smooth.scores[,4])
mat <- assays(v2.merge)$mean.smooth.scores
mat <- assays(son.tsa.v2)$smooth.scores
plot(mat[,1], mat[,2])
plot(mat[,7], mat[,8])
v1 <- ecdf(mat[,4])(mat[,4])
v1 <- ecdf(mat[,7])(mat[,7])
v1 <- ecdf(mat[,8])(mat[,8])
v1 <- ecdf(mat[,7])(mat[,7])
v2 <- ecdf(mat[,8])(mat[,8])
plot(v1, v2)
mat <- assays(son.tsa.v2)$raw.scores
v1 <- ecdf(mat[,7])(mat[,7])
v2 <- ecdf(mat[,8])(mat[,8])
plot(v1, v2)
assays(son.tsa.v2)$raw.scores
mat <- assays(son.tsa.v2)$raw.scores
plot(mat[,7], mat[,8])
mat <- assays(son.tsa.v2)$raw.scores
v1 <- round(ecdf(mat[,7])(mat[,7]), 2)
v2 <- round(ecdf(mat[,8])(mat[,8]), 2)
plot(v1, v2)
mat <- assays(son.tsa.v2)$smooth.scores
v1 <- round(ecdf(mat[,7])(mat[,7]), 2)
v2 <- round(ecdf(mat[,8])(mat[,8]), 2)
plot(v1, v2)
mat
# Calculate TSA-seq scores
# Normalizes pulldown and input bin counts to 1E6 and
# defines the TSA-seq score as log2(pulldown CPM / input CPM)
calc_scores <- function(pulldown, input, norm.type = "rel.pulldown", samp.names){
if (!norm.type %in% c("rel.pulldown", "rel.input")){
stop("norm.type must be one of 'rel.pulldown' or 'rel.input'.")
}
pd.mat <- assays(pulldown)$counts
in.mat <- assays(input)$counts
colnames(pd.mat) <- samp.names
colnames(in.mat) <- samp.names
pd.tot <- colData(pulldown)$total
in.tot <- colData(input)$total
col.dat <- data.frame(
pulldown.total = pd.tot,
input.total = in.tot
)
rownames(col.dat) <- samp.names
if (norm.type == "rel.pulldown"){
raw.scores <- sapply(
X = seq_len(ncol(pd.mat)),
FUN = function(x){
mean.input <- mean(in.mat[,x][in.mat[,x] != 0])
n.prime <- ifelse(((pd.mat[,x] > 0) & (in.mat[,x] > 0)),
((pd.mat[,x]) * mean.input) / (in.mat[,x]),
NA)
mean.prime <- mean(n.prime, na.rm = TRUE)
norm.sc <- ifelse(!is.na(n.prime), log2(n.prime / mean.prime), NA)
return(norm.sc)
}
)
} else if (norm.type == "rel.input"){
raw.scores <- sapply(
X = seq_len(ncol(pd.mat)),
FUN = function(x){
limit <- log2((1 / pd.tot[x]) / (1 / in.tot[x]))
norm.sc <- log2(((pd.mat[,x] + 1) / pd.tot[x]) /
((in.mat[,x] + 1) / in.tot[x]))
norm.sc[norm.sc == limit] <- NA
return(norm.sc)
}
)
}
colnames(raw.scores) <- samp.names
rse <- SummarizedExperiment(
assays = list(pulldown.counts = pd.mat,
input.counts = in.mat,
raw.scores = raw.scores),
rowRanges = rowRanges(pulldown),
colData = col.dat
)
return(rse)
}
son.tsa.v2 <- calc_scores(
pulldown = pulldown.v2,
input = input.v2,
samp.names = samp.names,
norm.type = "rel.pulldown"
)
son.tsa.v2 <- smooth_scores(norm.se = son.tsa.v2, BPPARAM = BPPARAM)
mat <- assays(son.tsa.v2)$smooth.scores
v1 <- round(ecdf(mat[,7])(mat[,7]), 2)
v2 <- round(ecdf(mat[,8])(mat[,8]), 2)
plot(v1, v2)
son.tsa.v2 <- calc_scores(
pulldown = pulldown.v2,
input = input.v2,
samp.names = samp.names,
norm.type = "rel.pulldown"
)
mat <- assays(son.tsa.v2)$raw.scores
v1 <- round(ecdf(mat[,7])(mat[,7]), 2)
v2 <- round(ecdf(mat[,8])(mat[,8]), 2)
plot(v1, v2)
