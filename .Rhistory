dat$fraction <- dat$frequency / sum( dat$frequency )
return(dat)
}
)
return( pos.bin )
} else{
return( pos.ll )
}
}
test2 <- relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = NULL
)
#'@param bins The number of bins to generate across the features. Defaults to NULL, which returns the relative position of every site..
#'@param metadata The names of metadata columns to keep. Only used when the data are not binned.
#'
#'@return A list of data frames.
#'
#'@import GenomicRanges
#'@import S4Vectors
#'
#'@export
#'
relative_positions <- function( site.list,
features,
bins = NULL,
metadata = NULL,
ignore.strand = FALSE ){
check_sites( site.list )
pos.ll <- lapply( X = site.list,
FUN = function(x){
if( all( width( x ) == 1 ) ){
gr <- x
} else{
warning( "The width of the provided integration sites was > 1.
Defining the position of each integration site as the 5' end of the given coordinates.",
call. = FALSE )
plus <- x[ strand( x ) == "+" ]
end( plus ) <- start( plus )
minus <- x[ strand( x ) == "-" ]
start( minus ) <- end( minus )
gr <- sort( c( plus, minus ), ignore.strand = TRUE )
}
ol <- findOverlaps( query = gr,
subject = features,
minoverlap = 1L,
type = "any",
ignore.strand = TRUE )
ol.sites <- gr[ queryHits( ol ) ]
ol.feats <- features[ subjectHits( ol ) ]
df <- data.frame( chr = as.character( seqnames( ol.sites ) ),
site = start( ranges( ol.sites ) ),
site.strand = as.character( strand( ol.sites ) ),
feature.start = start( ranges( ol.feats ) ),
feature.end = end( ranges( ol.feats ) ),
feature.strand = as.character( strand( ol.feats ) ) )
df$rel.position <- ( df$site - df$feature.start ) / ( df$feature.end - df$feature.start )
if( !is.null( metadata ) ){
md <- mcols( ol.feats )[ names( mcols( features ) ) == metadata ]
df <- cbind( df, md )
}
return( df )
}
)
if( !is.null( bins ) ){
b <- seq(0, 1, length.out = bins + 1 )
pos.bin <- lapply( X = pos.ll,
FUN = function(x){
v <- x$rel.position
tt <- table(cut(v, breaks = b, include.lowest = TRUE))
percentiles <- b
percentiles <- percentiles[ percentiles != 0 ] * 100
dat <- data.frame( percentiles = percentiles )
dat <- cbind( dat, data.frame( tt ) )
dat <- dat[,c(1,3)]
colnames(dat) <- c( "percentile", "frequency" )
dat$fraction <- dat$frequency / sum( dat$frequency )
return(dat)
}
)
return( pos.bin )
} else{
return( pos.ll )
}
}
test <- relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = NULL
)
test
test[ test$feature.strand == "-" ]
test[[1]][ test[[1]]$feature.strand == "-", ]
test[[1]][ test[[1]]$feature.strand == "-", ] <- NULL
test[[1]][ test[[1]]$feature.strand == "-", ] <- 0
test[[1]]
test <- relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = NULL
)
test
test[[1]][ test[[1]]$feature.strand == "-", ]$rel.position <- 0
test[[1]]
test <- relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = NULL
)
test
test <- relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = NULL
)
test[[1]]
test[[1]][ test[[1]]$feature.strand == "-", ]$rel.position <- 1 - test[[1]][ test[[1]]$feature.strand == "-", ]$rel.position
test[[1]]
#'@param metadata The names of metadata columns to keep. Only used when the data are not binned.
#'@param ignore.strand Boolean. Whether or not to return relative positions relative to feature directionality. Defaults to FALSE (directionality is considered). This has no influence on overlap quantification.
#'
#'@return A list of data frames.
#'
#'@import GenomicRanges
#'@import S4Vectors
#'
#'@export
#'
relative_positions <- function( site.list,
features,
bins = NULL,
metadata = NULL,
ignore.strand = FALSE ){
check_sites( site.list )
pos.ll <- lapply( X = site.list,
FUN = function(x){
if( all( width( x ) == 1 ) ){
gr <- x
} else{
warning( "The width of the provided integration sites was > 1.
Defining the position of each integration site as the 5' end of the given coordinates.",
call. = FALSE )
plus <- x[ strand( x ) == "+" ]
end( plus ) <- start( plus )
minus <- x[ strand( x ) == "-" ]
start( minus ) <- end( minus )
gr <- sort( c( plus, minus ), ignore.strand = TRUE )
}
ol <- findOverlaps( query = gr,
subject = features,
minoverlap = 1L,
type = "any",
ignore.strand = TRUE )
ol.sites <- gr[ queryHits( ol ) ]
ol.feats <- features[ subjectHits( ol ) ]
df <- data.frame( chr = as.character( seqnames( ol.sites ) ),
site = start( ranges( ol.sites ) ),
site.strand = as.character( strand( ol.sites ) ),
feature.start = start( ranges( ol.feats ) ),
feature.end = end( ranges( ol.feats ) ),
feature.strand = as.character( strand( ol.feats ) ) )
df$rel.position <- ( df$site - df$feature.start ) / ( df$feature.end - df$feature.start )
if( !ignore.strand ){
df[ df$feature.strand == "-", ]$rel.position <- 1 - df[ df$feature.strand == "-", ]$rel.position
}
if( !is.null( metadata ) ){
md <- mcols( ol.feats )[ names( mcols( features ) ) == metadata ]
df <- cbind( df, md )
}
return( df )
}
)
if( !is.null( bins ) ){
b <- seq(0, 1, length.out = bins + 1 )
pos.bin <- lapply( X = pos.ll,
FUN = function(x){
v <- x$rel.position
tt <- table(cut(v, breaks = b, include.lowest = TRUE))
percentiles <- b
percentiles <- percentiles[ percentiles != 0 ] * 100
dat <- data.frame( percentiles = percentiles )
dat <- cbind( dat, data.frame( tt ) )
dat <- dat[,c(1,3)]
colnames(dat) <- c( "percentile", "frequency" )
dat$fraction <- dat$frequency / sum( dat$frequency )
return(dat)
}
)
return( pos.bin )
} else{
return( pos.ll )
}
}
rm(test)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = NULL,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = NULL,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = NULL,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[1],
features = genes,
bins = NULL,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[1],
features = genes,
bins = NULL,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[1],
features = genes,
bins = NULL,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[1],
features = genes,
bins = NULL,
ignore.strand = TRUE
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = 10,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = 10,
ignore.strand = TRUE
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = 10,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = 10,
ignore.strand = TRUE
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = 10,
ignore.strand = FALSE
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = 20
)
#'@param metadata The names of metadata columns to keep. Only used when the data are not binned.
#'@param ignore.strand Boolean. Whether or not to return relative positions relative to feature directionality. Defaults to FALSE (directionality is considered). This has no influence on overlap quantification.
#'
#'@return A list of data frames.
#'
#'@import GenomicRanges
#'@import S4Vectors
#'
#'@export
#'
relative_positions <- function( site.list,
features,
bins = NULL,
metadata = NULL ){
check_sites( site.list )
pos.ll <- lapply( X = site.list,
FUN = function(x){
if( all( width( x ) == 1 ) ){
gr <- x
} else{
warning( "The width of the provided integration sites was > 1.
Defining the position of each integration site as the 5' end of the given coordinates.",
call. = FALSE )
plus <- x[ strand( x ) == "+" ]
end( plus ) <- start( plus )
minus <- x[ strand( x ) == "-" ]
start( minus ) <- end( minus )
gr <- sort( c( plus, minus ), ignore.strand = TRUE )
}
ol <- findOverlaps( query = gr,
subject = features,
minoverlap = 1L,
type = "any",
ignore.strand = TRUE )
ol.sites <- gr[ queryHits( ol ) ]
ol.feats <- features[ subjectHits( ol ) ]
df <- data.frame( chr = as.character( seqnames( ol.sites ) ),
site = start( ranges( ol.sites ) ),
site.strand = as.character( strand( ol.sites ) ),
feature.start = start( ranges( ol.feats ) ),
feature.end = end( ranges( ol.feats ) ),
feature.strand = as.character( strand( ol.feats ) ) )
df$rel.position <- ( df$site - df$feature.start ) / ( df$feature.end - df$feature.start )
df[ df$feature.strand == "-", ]$rel.position <- 1 - df[ df$feature.strand == "-", ]$rel.position
if( !is.null( metadata ) ){
md <- mcols( ol.feats )[ names( mcols( features ) ) == metadata ]
df <- cbind( df, md )
}
return( df )
}
)
if( !is.null( bins ) ){
b <- seq(0, 1, length.out = bins + 1 )
pos.bin <- lapply( X = pos.ll,
FUN = function(x){
v <- x$rel.position
tt <- table(cut(v, breaks = b, include.lowest = TRUE))
percentiles <- b
percentiles <- percentiles[ percentiles != 0 ] * 100
dat <- data.frame( percentiles = percentiles )
dat <- cbind( dat, data.frame( tt ) )
dat <- dat[,c(1,3)]
colnames(dat) <- c( "percentile", "frequency" )
dat$fraction <- dat$frequency / sum( dat$frequency )
return(dat)
}
)
return( pos.bin )
} else{
return( pos.ll )
}
}
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = 20
)
relative_positions(
site.list = sub.sites[c(4,21)],
features = genes,
bins = 10
)
logos <- make_logo(
site.list = sub.sites[c(4,21)],
seq.len = 24,
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
return.plot = TRUE
)
devtools::document()
devtools::install()
feature_density(
site.list = sub.sites,
features = genes,
win.size = 1E6,
average = TRUE
)
head(list(seq_len(1000), seq_len(1000))
)
lapply( list(seq_len(1000), seq_len(1000)), head )
devtools::document()
devtools::install()
library(xInt)
library(BSgenome.Hsapiens.UCSC.hs1)
sites <- import_sites(
path = "~/Desktop/sites_lift/test_sites/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
match.levels = TRUE
)
uninf.id <- names(sites)[ grepl( pattern = "UNINF", x = names(sites) ) ]
sub.sites <- subtract_uninfected_sites(
site.list = sites,
uninfected.datasets = uninf.id
)
genes <- rtracklayer::import( con = "~/Desktop/T2T_annotations/chm13v2.0_genes.bed.gz" )
genes$score <- NULL
genes
genes$name2 <- paste0( "Feature", seq_along(genes) )
genes
g.obj <- xInt_object(
site.list = sub.sites,
features = genes,
conditions = c( rep("CKO", 8), rep("cWT", 5), rep("WT", 9) ),
condition.levels = c("WT", "cWT", "CKO"),
id.col = "name"
)
colData(g.obj)
View(colData(g.obj))
colData(g.obj)
View(data.frame(colData(g.obj)))
g.obj <- xInt_object(
site.list = sites,
features = genes,
conditions = c( rep("CKO", 8), rep("cWT", 5), rep("WT", 9) ),
condition.levels = c("WT", "cWT", "CKO"),
id.col = "name"
)
g.obj <- xInt_object(
site.list = sites[ !names(sites) %in% c("UNINF_1", "UNINF_2")],
features = genes,
conditions = c( rep("CKO", 8), rep("cWT", 5), rep("WT", 9) ),
condition.levels = c("WT", "cWT", "CKO"),
id.col = "name"
)
View(data.frame(colData(g.obj)))
devtools::document()
devtools::install()
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
setwd("~/Desktop")
set.seed(1)
lib.sizes <- sample( seq(1E3, 3.5E3), 2 )
simulate_random_data(
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
n.sites = lib.sizes,
mean = 500,
sd = 250,
min.width = 14,
max.distance = 900,
max.bp = 150,
iterations = 2,
n.cores = 2,
write.ranges = FALSE,
write.reads = TRUE,
prefix = paste0("random_"),
directory.path = ".",
compress = TRUE,
collapse = TRUE
)
simulate_random_data(
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
n.sites = lib.sizes,
mean = 500,
sd = 250,
min.width = 14,
max.distance = 900,
max.bp = 150,
iterations = 1,
n.cores = 2,
write.ranges = FALSE,
write.reads = TRUE,
prefix = paste0("random_"),
directory.path = ".",
compress = TRUE,
collapse = TRUE
)
simulate_random_data(
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
n.sites = lib.sizes,
mean = 500,
sd = 250,
min.width = 14,
max.distance = 900,
max.bp = 150,
iterations = 1,
n.cores = 2,
write.ranges = FALSE,
write.reads = TRUE,
prefix = paste0("random"),
directory.path = ".",
compress = TRUE,
collapse = FALSE
)
simulate_random_data(
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
n.sites = 10000,
mean = 500,
sd = 250,
min.width = 14,
max.distance = 900,
max.bp = 150,
iterations = 2,
n.cores = 2,
write.ranges = FALSE,
write.reads = TRUE,
prefix = paste0("random"),
directory.path = ".",
compress = TRUE,
collapse = FALSE
)
simulate_random_data(
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
n.sites = 5,
mean = 500,
sd = 250,
min.width = 14,
max.distance = 900,
max.bp = 150,
iterations = 2,
n.cores = 2,
write.ranges = FALSE,
write.reads = TRUE,
prefix = paste0("random"),
directory.path = ".",
compress = TRUE,
collapse = FALSE
)
length( 5 )
devtools::documents()
devtools::document()
