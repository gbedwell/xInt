devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1
)
set.seed(1)
sites <- lapply(
X = all.sites[!names(all.sites) %in% "C1"],
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
return( gr )
}
)
uninf <- all.sites[names(all.sites) %in% "C1" ][[1]]
set.seed(1)
uninf <- sample(uninf, size = 5)
set.seed(1)
sites <- lapply(
X = sites@sites,
FUN = function(x){
nn <- sample(seq(0,5), size = 1)
un <- sample(uninf, size = nn)
gr <- c(x, un)
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
sites <- c(sites, list(C1 = uninf))
sites <- SiteList(sites)
set.seed(1)
sites2 <- sample(all.sites[[1]], size = 1E4, replace = TRUE)
sites2 <- sortSeqlevels(sites2)
sites2 <- sort(sites2, ignore.strand = TRUE)
sites2 <- list(A1 = sites2)
sites2 <- SiteList(sites2)
feats <- rtracklayer::import(con="~/Documents/github/xInt_data/chm13v2.0_genes.bed.gz", format="BED")
feats$score <- NULL
feats$name <- paste0("Feature", seq_along(feats))
xobj <- make_xIntOverlap(
sites = all.sites[!names(all.sites) %in% "C1"],
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
xobj <- xobj[-which( rowSums( assay(xobj) ) == 0 ),]
usethis::use_data(sites, sites2, xobj, internal = FALSE, overwrite = TRUE)
sites2
sites
xobj
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
install.packages("pROC")
library(GenomicRanges)
library(IRanges)
library(pROC)
# Sample integration site data
integration_sites <- data.frame(
chr = c("chr1", "chr1", "chr2"),
start = c(10000, 10500, 20300),
end = c(10001, 10501, 20301)
)
# Matched random sites
random_sites <- data.frame(
chr = c("chr1", "chr1", "chr2"),
start = c(5000, 15000, 30000),
end = c(5001, 15001, 30001)
)
# Genomic feature annotations
features <- data.frame(
chr = c("chr1", "chr1", "chr2"),
start = c(9500, 10400, 20000),
end = c(9600, 10600, 20500)
)
gr_integrations <- GRanges(seqnames = integration_sites$chr,
ranges = IRanges(integration_sites$start, integration_sites$end))
gr_randoms <- GRanges(seqnames = random_sites$chr,
ranges = IRanges(random_sites$start, random_sites$end))
gr_features <- GRanges(seqnames = features$chr,
ranges = IRanges(features$start, features$end))
# Set proximity window (e.g., 1000 bp)
window <- 1000
# Extend features by window
gr_features_extended <- resize(gr_features, width = width(gr_features) + 2 * window, fix = "center")
# Check overlaps
integration_hits <- countOverlaps(gr_integrations, gr_features_extended) > 0
random_hits <- countOverlaps(gr_randoms, gr_features_extended) > 0
# Check overlaps
integration_hits <- countOverlaps(gr_integrations, gr_features_extended) > 0
random_hits <- countOverlaps(gr_randoms, gr_features_extended) > 0
# True labels: 1 for real, 0 for random
labels <- c(rep(1, length(gr_integrations)), rep(0, length(gr_randoms)))
# Scores: 1 if near feature, 0 otherwise
scores <- c(as.integer(integration_hits), as.integer(random_hits))
# ROC and AUC
roc_obj <- roc(labels, scores)
auc_value <- auc(roc_obj)
print(paste("ROC AUC =", round(auc_value, 3)))
plot(roc_obj, main = paste("ROC Curve (AUC =", round(auc_value, 3), ")"))
abline(a = 0, b = 1, col = "gray", lty = 2)
library(GenomicRanges)
library(IRanges)
library(pROC)
# Sample integration site data
integration_sites <- data.frame(
chr = c("chr1", "chr1", "chr2"),
start = c(10000, 10500, 20300),
end = c(10001, 10501, 20301)
)
# Matched random sites
random_sites <- data.frame(
chr = c("chr1", "chr1", "chr2"),
start = c(5000, 15000, 30000),
end = c(5001, 15001, 30001)
)
# Genomic feature annotations
features <- data.frame(
chr = c("chr1", "chr1", "chr2"),
start = c(9500, 10400, 20000),
end = c(9600, 10600, 20500)
)
gr_integrations <- GRanges(seqnames = integration_sites$chr,
ranges = IRanges(integration_sites$start, integration_sites$end))
gr_randoms <- GRanges(seqnames = random_sites$chr,
ranges = IRanges(random_sites$start, random_sites$end))
gr_features <- GRanges(seqnames = features$chr,
ranges = IRanges(features$start, features$end))
# Set proximity window (e.g., 1000 bp)
window <- 100
# Extend features by window
gr_features_extended <- resize(gr_features, width = width(gr_features) + 2 * window, fix = "center")
# Check overlaps
integration_hits <- countOverlaps(gr_integrations, gr_features_extended) > 0
random_hits <- countOverlaps(gr_randoms, gr_features_extended) > 0
# True labels: 1 for real, 0 for random
labels <- c(rep(1, length(gr_integrations)), rep(0, length(gr_randoms)))
# Scores: 1 if near feature, 0 otherwise
scores <- c(as.integer(integration_hits), as.integer(random_hits))
# ROC and AUC
roc_obj <- roc(labels, scores)
auc_value <- auc(roc_obj)
print(paste("ROC AUC =", round(auc_value, 3)))
plot(roc_obj, main = paste("ROC Curve (AUC =", round(auc_value, 3), ")"))
abline(a = 0, b = 1, col = "gray", lty = 2)
abs(c(-10,5))
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(BSgenome.Hsapiens.UCSC.hs1)
library(changepoint)
sites <- import_sites("~/Desktop/sites")
sites <- sites[!grepl("unique", names(sites))]
set.seed(1)
HEK1.idx <- sample(1:7, size = 4, replace = FALSE)
HEK2.idx <- seq_len(7)[-HEK1.idx]
conditions <- ifelse(seq_len(7) %in% HEK1.idx, "HEK1", "HEK2")
condition.levels <- c("HEK1", "HEK2")
library(GenomicRanges)
library(xInt)
library(BSgenome.Hsapiens.UCSC.hs1)
library(changepoint)
sites <- import_sites("~/Desktop/sites")
sites <- sites[!grepl("unique", names(sites))]
set.seed(1)
HEK1.idx <- sample(1:7, size = 4, replace = FALSE)
HEK2.idx <- seq_len(7)[-HEK1.idx]
conditions <- ifelse(seq_len(7) %in% HEK1.idx, "HEK1", "HEK2")
condition.levels <- c("HEK1", "HEK2")
names(mcols(sites@sites))
names(mcols(sites[[1]]@sites))
sites[[1]]@sites
sites@sites
sites@sites[[1]]
mcols(sites@sites[[1]])
names(mcols(sites@sites[[1]]))
sites <- import_sites("~/Desktop/sites", keep.metadata = "score")
sites <- import_sites("~/Desktop/sites", keep.metadata = TRUE)
sites
mcols(sites)
mcols(sites@sites[[1]])
mcols(sites@sites[[1]])[["score"]]
devtools::document()
devtools::install()
round(c(22.4, 1.5, 3.8))
is.integer(round(c(22.4, 1.5, 3.8)))
gr <- GRanges(
seqnames = c("chr1", "chr2", "chr3"),
)
gr <- GRanges(
seqnames = c("chr1", "chr2", "chr3"),
ranges = IRanges(start = c(1,2,3), end = c(4,5,6))
)
gr
counts <- c(5, 3, 2)
sapply(
X = seq_along(gr),
FUN = function(x){rep(gr[x], counts[x])}
)
expanded.gr <- sapply(
X = seq_along(gr),
FUN = function(x){rep(gr[x], counts[x])}
)
expanded.gr
unlist(as(expanded.gr, "GRangesList"))
median(runif(0,1))
median(runif(0,1))
runif(0,1)
runif(10,1)
runif(10,0,1)
median(runif(10,0,1))
median(runif(1000,0,1))
mean(runif(1000,0,1))
quantile(runif(1000,0,1))
quantile(rnorm(1000, 0.5, 1))
quantile(rnorm(1000, 0.5, 1), 0.4)
quantile(runif(1000,0,1), 0.4)
devtools::document()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
#' Global Overlap Comparisons Effect Sizes
#'
#' Returns ROC AUC, Cohen's h, and Jensen-Shannon divergence values for feature overlap between conditions.
#' The reported AUC values are directionless -- always between 0.5 and 1.
#'
#' @param xint.obj An xIntOverlap object containing feature overlap information
#' @return A data frame with effect size statistics (ROC AUC, Cohen's h, and Jensen-Shannon divergence) for each comparison
#'
#' @importFrom pROC roc auc ci.auc
#' @importFrom stats qnorm
#'
#' @export
#'
overlap_effect <- function(xint.obj) {
if(!validObject(xint.obj)) {
stop("xint.obj is not a valid xIntObject.", call. = FALSE)
}
col.dat <- colData(xint.obj)
conditions <- levels(col.dat$condition)
cond.pairs <- combn(conditions, 2, simplify = FALSE)
results <- lapply(
X = seq_along(cond.pairs),
FUN = function(i) {
cond.pair <- cond.pairs[[i]]
cond1 <- cond.pair[2]
cond2 <- cond.pair[1]
samples1 <- col.dat[col.dat$condition == cond1, ]$sample
samples2 <- col.dat[col.dat$condition == cond2, ]$sample
o.counts1 <- col.dat[samples1, "overlapping.sites"]
t.counts1 <- col.dat[samples1, "total.sites"]
o.counts2 <- col.dat[samples2, "overlapping.sites"]
t.counts2 <- col.dat[samples2, "total.sites"]
ts.1 <- sum(t.counts1)
os.1 <- sum(o.counts1)
score.1 <- c(rep(1, os.1), rep(0, ts.1 - os.1))
ts.2 <- sum(t.counts2)
os.2 <- sum(o.counts2)
score.2 <- c(rep(1, os.2), rep(0, ts.2 - os.2))
labels <- c(rep(0, ts.1), rep(1, ts.2))
scores <- c(score.1, score.2)
roc <- roc(response = labels, predictor = scores, quiet = TRUE)
auc <- auc(roc)
# Flip AUC value if < 0.5
if (auc < 0.5) {
auc <- 1 - auc
}
# ci <- ci.auc(roc, method = "delong")
# d <- sqrt(2) * qnorm(auc)
# prop1 <- sum(o.counts1) / sum(t.counts1)
# prop2 <- sum(o.counts2) / sum(t.counts2)
# phi1 <- 2 * asin(sqrt(prop1))
# phi2 <- 2 * asin(sqrt(prop2))
# h <- abs(phi1 - phi2)
rate.scale <- 10
# Fit Quasi-Poisson models to account for overdispersion
qp1 <- glm(o.counts1 ~ t.counts1, family = quasipoisson())
qp2 <- glm(o.counts2 ~ t.counts2, family = quasipoisson())
# Predict lambda values using Quasi-Poisson models
lambda1 <- predict(qp1, type = "response") * rate.scale
lambda2 <- predict(qp2, type = "response") * rate.scale
lambda1 <- sum(predicted_counts1) / sum(t.counts1) * rate.scale
lambda2 <- sum(predicted_counts2) / sum(t.counts2) * rate.scale
print(lambda1)
# lambda1 <- mean(o.counts1 / t.counts1) * rate.scale
# lambda2 <- mean(o.counts2 / t.counts2) * rate.scale
kl.1to2 <- lambda1 - lambda2 + lambda2 * log(lambda2 / lambda1)
kl.2to1 <- lambda2 - lambda1 + lambda1 * log(lambda1 / lambda2)
js <- 0.5 * (kl.1to2 + kl.2to1)
out <- data.frame(
comparison = paste0(cond1, "-", cond2),
roc.auc = auc,
# cohens.h = h,
js.divergence = js
)
return(out)
}
)
return(do.call(rbind, results))
}
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document9)
devtools::document())
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install(0)
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::import()
devtools::install()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
