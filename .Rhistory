library(xInt)
library(BSgenome.Hsapiens.UCSC.hs1)
data(sites, package="xInt")
uninf.id <- names(sites)[ grepl( pattern = "C", x = names(sites) ) ]
sub.sites <- subtract_uninfected_sites(
site.list = sites,
uninfected.datasets = uninf.id
)
data(feats, package="xInt")
x.obj <- make_xIntObject(
site.list = sub.sites,
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
sub.sites
x.obj <- make_xIntObject(
site.list = sub.sites,
features = feats,
conditions = c(rep("A", 2), rep("B", 2)),
condition.levels = c("A", "B"),
id.col = "name"
)
is(x.obj, "xIntObject")
loc.comp <- local_comparisons( xint.obj = x.obj, return.contrasts = TRUE, plot = TRUE )
summary( decideTests( loc.comp ) )
head( topTable( loc.comp, coef = 1, number = Inf, p.value = 1 ) )
global_comparisons( xint.obj = x.obj )
volcanoplot( loc.comp, coef = 1 )
loc.comp <- local_comparisons( xint.obj = x.obj, return.contrasts = TRUE, plot = TRUE )
make_logo(
site.list = sub.sites[c(1,5)],
seq.len = 24,
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
return.plot = TRUE
)
make_logo(
site.list = sub.sites[c(1,3)],
seq.len = 24,
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
return.plot = TRUE
)
calculate_dG(
site.list = sub.sites[c(1,3)],
step.len = 50,
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
return.plot = TRUE
)
feature_density(
site.list = sub.sites,
features = feats,
win.size = 1E6,
average = TRUE
)
rp <- relative_positions(
site.list = sub.sites[c(1,3)],
features = feats,
bins = NULL
)
lapply( rp, head )
relative_positions(
site.list = sub.sites[c(1,3)],
features = feats,
bins = 10
)
BiocCheck::BiocCheck()
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
match.levels = TRUE
)
sites <- as( sites, "GRangesList" )
feats <- rtracklayer::import(con="~/Documents/github/xInt_data/chm13v2.0_genes.bed.gz", format="BED")
usethis::use_data(sites, feats, internal = FALSE, overwrite = TRUE, compress = "gzip")
sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
match.levels = TRUE
)
feats <- rtracklayer::import(con="~/Documents/github/xInt_data/chm13v2.0_genes.bed.gz", format="BED")
x.obj <- make_xIntObject(
site.list = sub.sites,
features = feats,
conditions = c(rep("A", 4), rep("B", 5), "C"),
condition.levels = c("A", "B"),
id.col = "name"
)
sites <- sites[ names(sites) %in% "C1" ]
sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
match.levels = TRUE
)
sites <- sites[ !names(sites) %in% "C1" ]
x.obj <- make_xIntObject(
site.list = sites,
features = feats,
conditions = c(rep("A", 4), rep("B", 5), "C"),
condition.levels = c("A", "B"),
id.col = "name"
)
x.obj <- make_xIntObject(
site.list = sites,
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
usethis::use_data(x.obj, internal = FALSE, overwrite = TRUE, compress = "gzip")
which( rowSums( assay(x.obj) ) == 0 )
x.obj[!which( rowSums( assay(x.obj) ) == 0 )]
x.obj[!which( rowSums( assay(x.obj) ) == 0 ),]
x.obj <- make_xIntObject(
site.list = sites,
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
length(which( rowSums( assay(x.obj) ) == 0 ))
feats
sample(seq(10,30), size = 1)
sample(seq(10,30), size = 1)
sample(seq(10,30), size = 1)
sample(seq(10,30), size = 1)
sample(seq(10,30), size = 1)
sample(seq(10,30), size = 1)
lapply(
X = all.sites,
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
sample(x, size = nn)
}
)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
match.levels = TRUE
)
set.seed(1)
lapply(
X = all.sites,
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
sample(x, size = nn)
}
)
lapply(
X = all.sites,
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
sort( gr, ignore.strand = TRUE )
}
)
lapply(
X = all.sites,
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
set.seed(1)
lapply(
X = all.sites,
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
match.levels = TRUE
)
all.sites <- all.sites[ !names(all.sites) %in% "C1" ]
set.seed(1)
sites <- lapply(
X = all.sites,
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
feats <- rtracklayer::import(con="~/Documents/github/xInt_data/chm13v2.0_genes.bed.gz", format="BED")
feats$score <- NULL
xobj <- make_xIntObject(
site.list = all.sites,
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
xobj <- xobj[!which( rowSums( assay(xobj) ) == 0 ),]
usethis::use_data(sites, xobj, internal = FALSE, overwrite = TRUE, compress = "gzip")
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
match.levels = TRUE
)
all.sites <- all.sites[ !names(all.sites) %in% "C1" ]
set.seed(1)
sites <- lapply(
X = all.sites,
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
feats <- rtracklayer::import(con="~/Documents/github/xInt_data/chm13v2.0_genes.bed.gz", format="BED")
feats$score <- NULL
feats$name <- paste0("Feature", seq_along(feats))
xobj <- make_xIntObject(
site.list = all.sites,
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
xobj <- xobj[!which( rowSums( assay(xobj) ) == 0 ),]
usethis::use_data(sites, xobj, internal = FALSE, overwrite = TRUE, compress = "gzip")
devtools::document()
devtools::document()
devtools::document()
devtools::install()
BiocCheck::BiocCheck()
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1,
match.levels = TRUE
)
sample(uninf, size = 10)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1
)
set.seed(1)
sites <- lapply(
X = all.sites[ !names(all.sites) %in% "C1" ],
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
uninf <- all.sites[ names(all.sites) %in% "C1" ]
sample(uninf, size = 10)
uninf <- all.sites[ names(all.sites) %in% "C1" ][[1]]
sample(uninf, size = 10)
set.seed(1)
sample(uninf, size = 10)
set.seed(1)
sites <- lapply(
X = all.sites[ !names(all.sites) %in% "C1" ],
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
uninf <- all.sites[ names(all.sites) %in% "C1" ][[1]]
set.seed(1)
uninf <- sample(uninf, size = 10)
uninf
plot(
0:500,
dnbinom(0:500, mu = 200, size = 100)
)
plot(
0:500,
dnbinom(0:500, mu = 200, size = 10)
)
200^2 / ( 100^2 - 200 )
plot(
0:500,
dnbinom(0:500, mu = 200, size = 4)
)
200^2 / ( 50^2 - 200 )
plot(
0:500,
dnbinom(0:500, mu = 200, size = 17)
)
set.seed(1)
lapply(
X = sites,
FUN = function(x){
nn <- sample(seq(1,5), size = 1)
un <- sample(uninf, size = nn)
gr <- c( x, un )
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
sites
c( sites, list( C1 = uninf ) )
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1
)
set.seed(1)
sites <- lapply(
X = all.sites[ !names(all.sites) %in% "C1" ],
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
return( gr )
}
)
uninf <- all.sites[ names(all.sites) %in% "C1" ][[1]]
set.seed(1)
uninf <- sample(uninf, size = 5)
set.seed(1)
sites <- lapply(
X = sites,
FUN = function(x){
nn <- sample(seq(0,5), size = 1)
un <- sample(uninf, size = nn)
gr <- c( x, un )
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
sites <- c( sites, list( C1 = uninf ) )
feats <- rtracklayer::import(con="~/Documents/github/xInt_data/chm13v2.0_genes.bed.gz", format="BED")
feats$score <- NULL
feats$name <- paste0("Feature", seq_along(feats))
xobj <- make_xIntObject(
site.list = all.sites[ !names(all.sites) %in% "C1" ],
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
xobj <- xobj[!which( rowSums( assay(xobj) ) == 0 ),]
xobj
assay(xobj)
xobj <- make_xIntObject(
site.list = all.sites[ !names(all.sites) %in% "C1" ],
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
assay(xobj)
xobj[!which( rowSums( assay(xobj) ) == 0 ),]
which( rowSums( assay(xobj) ) == 0 )
length(which( rowSums( assay(xobj) ) == 0 ))
xobj[!which( rowSums( assay(xobj) ) == 0 ),]
assay(xobj)[!which( rowSums( assay(xobj) ) == 0 ),]
assay(xobj)[!which( rowSums( assay(xobj) ) == 0 ),]
[!which( rowSums( assay(xobj) ) == 0 ),]
which( rowSums( assay(xobj) ) == 0 )
plot(0:1000, dnbinom(0:1000, mu=500, 15))
500^2 / ( 250^2 - 500 )
plot(0:1000, dnbinom(0:1000, mu=500, size=4))
plot(0:1000, dnbinom(0:1000, mu=500, size=5))
500^2 / ( 100^2 - 500 )
500^2 / ( 200^2 - 500 )
500^2 / ( 150^2 - 500 )
plot(0:1000, dnbinom(0:1000, mu=500, size=11.36))
rowSums(assay(xobj) >= 100)
rowSums( assay(xobj) == 0 )
rowSums( assay(xobj) )
xobj[which( rowSums( assay(xobj) ) == 0 ),]
xobj[-which( rowSums( assay(xobj) ) == 0 ),]
xobj <- xobj[-which( rowSums( assay(xobj) ) == 0 ),]
assay(xobj)
all.sites[1]
sites2 <- all.sites[1]
sites2 <- sort( sample( all.sites[1], size = 1E4 ), ignore.strand = TRUE)
set.seed(1)
sites2 <- sort( sample( all.sites[1], size = 1E4, replace = FALSE ), ignore.strand = TRUE)
set.seed(1)
sites2 <- sort( sample( all.sites[1], size = 1E4, replace = TRUE ), ignore.strand = TRUE)
sample( all.sites[1], size = 1E4, replace = TRUE )
all.sites[1]
set.seed(1)
sites2 <- sort( sample( all.sites[[1]], size = 1E4, replace = TRUE ), ignore.strand = TRUE )
sites2
set.seed(1)
sites2 <- sample( all.sites[[1]], size = 1E4, replace = TRUE )
sites2 <- sortSeqlevels( sites2 )
sites2 <- sort( sites2, ignore.strand = TRUE )
sites2
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1
)
set.seed(1)
sites <- lapply(
X = all.sites[ !names(all.sites) %in% "C1" ],
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
return( gr )
}
)
uninf <- all.sites[ names(all.sites) %in% "C1" ][[1]]
set.seed(1)
uninf <- sample(uninf, size = 5)
set.seed(1)
sites <- lapply(
X = sites,
FUN = function(x){
nn <- sample(seq(0,5), size = 1)
un <- sample(uninf, size = nn)
gr <- c( x, un )
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
sites <- c( sites, list( C1 = uninf ) )
set.seed(1)
sites2 <- sample( all.sites[[1]], size = 1E4, replace = TRUE )
sites2 <- sortSeqlevels( sites2 )
sites2 <- sort( sites2, ignore.strand = TRUE )
feats <- rtracklayer::import(con="~/Documents/github/xInt_data/chm13v2.0_genes.bed.gz", format="BED")
feats$score <- NULL
feats$name <- paste0("Feature", seq_along(feats))
xobj <- make_xIntObject(
site.list = all.sites[ !names(all.sites) %in% "C1" ],
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
xobj <- xobj[-which( rowSums( assay(xobj) ) == 0 ),]
usethis::use_data(sites, sites2, xobj, internal = FALSE, overwrite = TRUE)
sites2
library(BSgenome.Hsapiens.UCSC.hs1)
library(xInt)
all.sites <- import_sites(
path = "~/Documents/github/xInt_data/example_data/",
pattern = ".bed",
genome.obj = BSgenome.Hsapiens.UCSC.hs1
)
set.seed(1)
sites <- lapply(
X = all.sites[ !names(all.sites) %in% "C1" ],
FUN = function(x){
nn <- sample(seq(10,30), size = 1)
gr <- sample(x, size = nn)
return( gr )
}
)
uninf <- all.sites[ names(all.sites) %in% "C1" ][[1]]
set.seed(1)
uninf <- sample(uninf, size = 5)
set.seed(1)
sites <- lapply(
X = sites,
FUN = function(x){
nn <- sample(seq(0,5), size = 1)
un <- sample(uninf, size = nn)
gr <- c( x, un )
gr <- sortSeqlevels(gr)
sort(gr, ignore.strand = TRUE)
}
)
sites <- c( sites, list( C1 = uninf ) )
set.seed(1)
sites2 <- sample( all.sites[[1]], size = 1E4, replace = TRUE )
sites2 <- sortSeqlevels( sites2 )
sites2 <- sort( sites2, ignore.strand = TRUE )
sites2 <- list( A1 = sites2 )
feats <- rtracklayer::import(con="~/Documents/github/xInt_data/chm13v2.0_genes.bed.gz", format="BED")
feats$score <- NULL
feats$name <- paste0("Feature", seq_along(feats))
xobj <- make_xIntObject(
site.list = all.sites[ !names(all.sites) %in% "C1" ],
features = feats,
conditions = c(rep("A", 4), rep("B", 5)),
condition.levels = c("A", "B"),
id.col = "name"
)
xobj <- xobj[-which( rowSums( assay(xobj) ) == 0 ),]
usethis::use_data(sites, sites2, xobj, internal = FALSE, overwrite = TRUE)
BiocCheck::BiocCheck()
13.7 + 7.4
